# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `ice-sqlite.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module DemoArea
_M_DemoArea = Ice.openModule('DemoArea')
__name__ = 'DemoArea'

if '_t_ByteSeq' not in _M_DemoArea.__dict__:
    _M_DemoArea._t_ByteSeq = IcePy.defineSequence('::DemoArea::ByteSeq', (), IcePy._t_byte)

if '_t_LongSeq' not in _M_DemoArea.__dict__:
    _M_DemoArea._t_LongSeq = IcePy.defineSequence('::DemoArea::LongSeq', (), IcePy._t_long)

if '_t_StringSeq' not in _M_DemoArea.__dict__:
    _M_DemoArea._t_StringSeq = IcePy.defineSequence('::DemoArea::StringSeq', (), IcePy._t_string)

# End of module DemoArea

# Start of module YCArea
_M_YCArea = Ice.openModule('YCArea')
__name__ = 'YCArea'

if 'DxPropertyYC' not in _M_YCArea.__dict__:
    _M_YCArea.DxPropertyYC = Ice.createTempClass()
    class DxPropertyYC(object):
        def __init__(self, name=None, unit=None, k=0.0, b=0.0, precision=0, fullvalue=0.0, mindelta=0.0, zerovalue=0.0, flog=0, fplan=0, fcache=0, fTrans=False, fMin=False, fMax=False, fAvrg=False, fRatio=False, fUpper=False, fLower=False, fUpper2=False, fLower2=False, fMinTime=False, fMaxTime=False, padding=0, fMax2=False, fMaxTime2=False, yxno=0, alevel=0, uppervalue=0.0, lowervalue=0.0, uppervalue2=0.0, lowervalue2=0.0):
            self.name = name
            self.unit = unit
            self.k = k
            self.b = b
            self.precision = precision
            self.fullvalue = fullvalue
            self.mindelta = mindelta
            self.zerovalue = zerovalue
            self.flog = flog
            self.fplan = fplan
            self.fcache = fcache
            self.fTrans = fTrans
            self.fMin = fMin
            self.fMax = fMax
            self.fAvrg = fAvrg
            self.fRatio = fRatio
            self.fUpper = fUpper
            self.fLower = fLower
            self.fUpper2 = fUpper2
            self.fLower2 = fLower2
            self.fMinTime = fMinTime
            self.fMaxTime = fMaxTime
            self.padding = padding
            self.fMax2 = fMax2
            self.fMaxTime2 = fMaxTime2
            self.yxno = yxno
            self.alevel = alevel
            self.uppervalue = uppervalue
            self.lowervalue = lowervalue
            self.uppervalue2 = uppervalue2
            self.lowervalue2 = lowervalue2

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_YCArea.DxPropertyYC):
                return NotImplemented
            else:
                if self.name != other.name:
                    return False
                if self.unit != other.unit:
                    return False
                if self.k != other.k:
                    return False
                if self.b != other.b:
                    return False
                if self.precision != other.precision:
                    return False
                if self.fullvalue != other.fullvalue:
                    return False
                if self.mindelta != other.mindelta:
                    return False
                if self.zerovalue != other.zerovalue:
                    return False
                if self.flog != other.flog:
                    return False
                if self.fplan != other.fplan:
                    return False
                if self.fcache != other.fcache:
                    return False
                if self.fTrans != other.fTrans:
                    return False
                if self.fMin != other.fMin:
                    return False
                if self.fMax != other.fMax:
                    return False
                if self.fAvrg != other.fAvrg:
                    return False
                if self.fRatio != other.fRatio:
                    return False
                if self.fUpper != other.fUpper:
                    return False
                if self.fLower != other.fLower:
                    return False
                if self.fUpper2 != other.fUpper2:
                    return False
                if self.fLower2 != other.fLower2:
                    return False
                if self.fMinTime != other.fMinTime:
                    return False
                if self.fMaxTime != other.fMaxTime:
                    return False
                if self.padding != other.padding:
                    return False
                if self.fMax2 != other.fMax2:
                    return False
                if self.fMaxTime2 != other.fMaxTime2:
                    return False
                if self.yxno != other.yxno:
                    return False
                if self.alevel != other.alevel:
                    return False
                if self.uppervalue != other.uppervalue:
                    return False
                if self.lowervalue != other.lowervalue:
                    return False
                if self.uppervalue2 != other.uppervalue2:
                    return False
                if self.lowervalue2 != other.lowervalue2:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_YCArea._t_DxPropertyYC)

        __repr__ = __str__

    _M_YCArea._t_DxPropertyYC = IcePy.defineStruct('::YCArea::DxPropertyYC', DxPropertyYC, (), (
        ('name', (), _M_DemoArea._t_ByteSeq),
        ('unit', (), _M_DemoArea._t_ByteSeq),
        ('k', (), IcePy._t_float),
        ('b', (), IcePy._t_float),
        ('precision', (), IcePy._t_short),
        ('fullvalue', (), IcePy._t_float),
        ('mindelta', (), IcePy._t_float),
        ('zerovalue', (), IcePy._t_float),
        ('flog', (), IcePy._t_short),
        ('fplan', (), IcePy._t_short),
        ('fcache', (), IcePy._t_short),
        ('fTrans', (), IcePy._t_bool),
        ('fMin', (), IcePy._t_bool),
        ('fMax', (), IcePy._t_bool),
        ('fAvrg', (), IcePy._t_bool),
        ('fRatio', (), IcePy._t_bool),
        ('fUpper', (), IcePy._t_bool),
        ('fLower', (), IcePy._t_bool),
        ('fUpper2', (), IcePy._t_bool),
        ('fLower2', (), IcePy._t_bool),
        ('fMinTime', (), IcePy._t_bool),
        ('fMaxTime', (), IcePy._t_bool),
        ('padding', (), IcePy._t_short),
        ('fMax2', (), IcePy._t_bool),
        ('fMaxTime2', (), IcePy._t_bool),
        ('yxno', (), IcePy._t_short),
        ('alevel', (), IcePy._t_short),
        ('uppervalue', (), IcePy._t_float),
        ('lowervalue', (), IcePy._t_float),
        ('uppervalue2', (), IcePy._t_float),
        ('lowervalue2', (), IcePy._t_float)
    ))

    _M_YCArea.DxPropertyYC = DxPropertyYC
    del DxPropertyYC

if 'DxDTYC' not in _M_YCArea.__dict__:
    _M_YCArea.DxDTYC = Ice.createTempClass()
    class DxDTYC(object):
        def __init__(self, status=0, value=0.0, timetag=0):
            self.status = status
            self.value = value
            self.timetag = timetag

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_YCArea.DxDTYC):
                return NotImplemented
            else:
                if self.status != other.status:
                    return False
                if self.value != other.value:
                    return False
                if self.timetag != other.timetag:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_YCArea._t_DxDTYC)

        __repr__ = __str__

    _M_YCArea._t_DxDTYC = IcePy.defineStruct('::YCArea::DxDTYC', DxDTYC, (), (
        ('status', (), IcePy._t_short),
        ('value', (), IcePy._t_float),
        ('timetag', (), IcePy._t_int)
    ))

    _M_YCArea.DxDTYC = DxDTYC
    del DxDTYC

if '_t_DxPropertyYCSeq' not in _M_YCArea.__dict__:
    _M_YCArea._t_DxPropertyYCSeq = IcePy.defineSequence('::YCArea::DxPropertyYCSeq', (), _M_YCArea._t_DxPropertyYC)

if '_t_DxDTYCSeq' not in _M_YCArea.__dict__:
    _M_YCArea._t_DxDTYCSeq = IcePy.defineSequence('::YCArea::DxDTYCSeq', (), _M_YCArea._t_DxDTYC)

# End of module YCArea

# Start of module YXArea
_M_YXArea = Ice.openModule('YXArea')
__name__ = 'YXArea'

if 'DxPropertyYX' not in _M_YXArea.__dict__:
    _M_YXArea.DxPropertyYX = Ice.createTempClass()
    class DxPropertyYX(object):
        def __init__(self, name=None, fAlarm=False, fAlarmCount=False, unused=0, reserved=0, ykno=0, alarmtype=0, alevel=0):
            self.name = name
            self.fAlarm = fAlarm
            self.fAlarmCount = fAlarmCount
            self.unused = unused
            self.reserved = reserved
            self.ykno = ykno
            self.alarmtype = alarmtype
            self.alevel = alevel

        def __hash__(self):
            _h = 0
            if self.name:
                for _i0 in self.name:
                    _h = 5 * _h + Ice.getHash(_i0)
            _h = 5 * _h + Ice.getHash(self.fAlarm)
            _h = 5 * _h + Ice.getHash(self.fAlarmCount)
            _h = 5 * _h + Ice.getHash(self.unused)
            _h = 5 * _h + Ice.getHash(self.reserved)
            _h = 5 * _h + Ice.getHash(self.ykno)
            _h = 5 * _h + Ice.getHash(self.alarmtype)
            _h = 5 * _h + Ice.getHash(self.alevel)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_YXArea.DxPropertyYX):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.fAlarm is None or other.fAlarm is None:
                    if self.fAlarm != other.fAlarm:
                        return (-1 if self.fAlarm is None else 1)
                else:
                    if self.fAlarm < other.fAlarm:
                        return -1
                    elif self.fAlarm > other.fAlarm:
                        return 1
                if self.fAlarmCount is None or other.fAlarmCount is None:
                    if self.fAlarmCount != other.fAlarmCount:
                        return (-1 if self.fAlarmCount is None else 1)
                else:
                    if self.fAlarmCount < other.fAlarmCount:
                        return -1
                    elif self.fAlarmCount > other.fAlarmCount:
                        return 1
                if self.unused is None or other.unused is None:
                    if self.unused != other.unused:
                        return (-1 if self.unused is None else 1)
                else:
                    if self.unused < other.unused:
                        return -1
                    elif self.unused > other.unused:
                        return 1
                if self.reserved is None or other.reserved is None:
                    if self.reserved != other.reserved:
                        return (-1 if self.reserved is None else 1)
                else:
                    if self.reserved < other.reserved:
                        return -1
                    elif self.reserved > other.reserved:
                        return 1
                if self.ykno is None or other.ykno is None:
                    if self.ykno != other.ykno:
                        return (-1 if self.ykno is None else 1)
                else:
                    if self.ykno < other.ykno:
                        return -1
                    elif self.ykno > other.ykno:
                        return 1
                if self.alarmtype is None or other.alarmtype is None:
                    if self.alarmtype != other.alarmtype:
                        return (-1 if self.alarmtype is None else 1)
                else:
                    if self.alarmtype < other.alarmtype:
                        return -1
                    elif self.alarmtype > other.alarmtype:
                        return 1
                if self.alevel is None or other.alevel is None:
                    if self.alevel != other.alevel:
                        return (-1 if self.alevel is None else 1)
                else:
                    if self.alevel < other.alevel:
                        return -1
                    elif self.alevel > other.alevel:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_YXArea._t_DxPropertyYX)

        __repr__ = __str__

    _M_YXArea._t_DxPropertyYX = IcePy.defineStruct('::YXArea::DxPropertyYX', DxPropertyYX, (), (
        ('name', (), _M_DemoArea._t_ByteSeq),
        ('fAlarm', (), IcePy._t_bool),
        ('fAlarmCount', (), IcePy._t_bool),
        ('unused', (), IcePy._t_byte),
        ('reserved', (), IcePy._t_int),
        ('ykno', (), IcePy._t_short),
        ('alarmtype', (), IcePy._t_short),
        ('alevel', (), IcePy._t_short)
    ))

    _M_YXArea.DxPropertyYX = DxPropertyYX
    del DxPropertyYX

if 'DxDTYX' not in _M_YXArea.__dict__:
    _M_YXArea.DxDTYX = Ice.createTempClass()
    class DxDTYX(object):
        def __init__(self, status=0, value=0, timetag=0):
            self.status = status
            self.value = value
            self.timetag = timetag

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.status)
            _h = 5 * _h + Ice.getHash(self.value)
            _h = 5 * _h + Ice.getHash(self.timetag)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_YXArea.DxDTYX):
                return NotImplemented
            else:
                if self.status is None or other.status is None:
                    if self.status != other.status:
                        return (-1 if self.status is None else 1)
                else:
                    if self.status < other.status:
                        return -1
                    elif self.status > other.status:
                        return 1
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                if self.timetag is None or other.timetag is None:
                    if self.timetag != other.timetag:
                        return (-1 if self.timetag is None else 1)
                else:
                    if self.timetag < other.timetag:
                        return -1
                    elif self.timetag > other.timetag:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_YXArea._t_DxDTYX)

        __repr__ = __str__

    _M_YXArea._t_DxDTYX = IcePy.defineStruct('::YXArea::DxDTYX', DxDTYX, (), (
        ('status', (), IcePy._t_short),
        ('value', (), IcePy._t_short),
        ('timetag', (), IcePy._t_int)
    ))

    _M_YXArea.DxDTYX = DxDTYX
    del DxDTYX

if '_t_DxPropertyYXSeq' not in _M_YXArea.__dict__:
    _M_YXArea._t_DxPropertyYXSeq = IcePy.defineSequence('::YXArea::DxPropertyYXSeq', (), _M_YXArea._t_DxPropertyYX)

if '_t_DxDTYXSeq' not in _M_YXArea.__dict__:
    _M_YXArea._t_DxDTYXSeq = IcePy.defineSequence('::YXArea::DxDTYXSeq', (), _M_YXArea._t_DxDTYX)

# End of module YXArea

# Start of module StationArea
_M_StationArea = Ice.openModule('StationArea')
__name__ = 'StationArea'

if 'DxPropertyStation' not in _M_StationArea.__dict__:
    _M_StationArea.DxPropertyStation = Ice.createTempClass()
    class DxPropertyStation(object):
        def __init__(self, name=None, nYX=0, nYC=0, type=0, protocol=None, addr1=None, addr2=None, port=0, slaveAddr=0, devName=None, baud=0, dataBits=0, stopBits=0, parity=0, timeout=0, reserved=0):
            self.name = name
            self.nYX = nYX
            self.nYC = nYC
            self.type = type
            self.protocol = protocol
            self.addr1 = addr1
            self.addr2 = addr2
            self.port = port
            self.slaveAddr = slaveAddr
            self.devName = devName
            self.baud = baud
            self.dataBits = dataBits
            self.stopBits = stopBits
            self.parity = parity
            self.timeout = timeout
            self.reserved = reserved

        def __hash__(self):
            _h = 0
            if self.name:
                for _i0 in self.name:
                    _h = 5 * _h + Ice.getHash(_i0)
            _h = 5 * _h + Ice.getHash(self.nYX)
            _h = 5 * _h + Ice.getHash(self.nYC)
            _h = 5 * _h + Ice.getHash(self.type)
            if self.protocol:
                for _i1 in self.protocol:
                    _h = 5 * _h + Ice.getHash(_i1)
            if self.addr1:
                for _i2 in self.addr1:
                    _h = 5 * _h + Ice.getHash(_i2)
            if self.addr2:
                for _i3 in self.addr2:
                    _h = 5 * _h + Ice.getHash(_i3)
            _h = 5 * _h + Ice.getHash(self.port)
            _h = 5 * _h + Ice.getHash(self.slaveAddr)
            if self.devName:
                for _i4 in self.devName:
                    _h = 5 * _h + Ice.getHash(_i4)
            _h = 5 * _h + Ice.getHash(self.baud)
            _h = 5 * _h + Ice.getHash(self.dataBits)
            _h = 5 * _h + Ice.getHash(self.stopBits)
            _h = 5 * _h + Ice.getHash(self.parity)
            _h = 5 * _h + Ice.getHash(self.timeout)
            _h = 5 * _h + Ice.getHash(self.reserved)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_StationArea.DxPropertyStation):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.nYX is None or other.nYX is None:
                    if self.nYX != other.nYX:
                        return (-1 if self.nYX is None else 1)
                else:
                    if self.nYX < other.nYX:
                        return -1
                    elif self.nYX > other.nYX:
                        return 1
                if self.nYC is None or other.nYC is None:
                    if self.nYC != other.nYC:
                        return (-1 if self.nYC is None else 1)
                else:
                    if self.nYC < other.nYC:
                        return -1
                    elif self.nYC > other.nYC:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.protocol is None or other.protocol is None:
                    if self.protocol != other.protocol:
                        return (-1 if self.protocol is None else 1)
                else:
                    if self.protocol < other.protocol:
                        return -1
                    elif self.protocol > other.protocol:
                        return 1
                if self.addr1 is None or other.addr1 is None:
                    if self.addr1 != other.addr1:
                        return (-1 if self.addr1 is None else 1)
                else:
                    if self.addr1 < other.addr1:
                        return -1
                    elif self.addr1 > other.addr1:
                        return 1
                if self.addr2 is None or other.addr2 is None:
                    if self.addr2 != other.addr2:
                        return (-1 if self.addr2 is None else 1)
                else:
                    if self.addr2 < other.addr2:
                        return -1
                    elif self.addr2 > other.addr2:
                        return 1
                if self.port is None or other.port is None:
                    if self.port != other.port:
                        return (-1 if self.port is None else 1)
                else:
                    if self.port < other.port:
                        return -1
                    elif self.port > other.port:
                        return 1
                if self.slaveAddr is None or other.slaveAddr is None:
                    if self.slaveAddr != other.slaveAddr:
                        return (-1 if self.slaveAddr is None else 1)
                else:
                    if self.slaveAddr < other.slaveAddr:
                        return -1
                    elif self.slaveAddr > other.slaveAddr:
                        return 1
                if self.devName is None or other.devName is None:
                    if self.devName != other.devName:
                        return (-1 if self.devName is None else 1)
                else:
                    if self.devName < other.devName:
                        return -1
                    elif self.devName > other.devName:
                        return 1
                if self.baud is None or other.baud is None:
                    if self.baud != other.baud:
                        return (-1 if self.baud is None else 1)
                else:
                    if self.baud < other.baud:
                        return -1
                    elif self.baud > other.baud:
                        return 1
                if self.dataBits is None or other.dataBits is None:
                    if self.dataBits != other.dataBits:
                        return (-1 if self.dataBits is None else 1)
                else:
                    if self.dataBits < other.dataBits:
                        return -1
                    elif self.dataBits > other.dataBits:
                        return 1
                if self.stopBits is None or other.stopBits is None:
                    if self.stopBits != other.stopBits:
                        return (-1 if self.stopBits is None else 1)
                else:
                    if self.stopBits < other.stopBits:
                        return -1
                    elif self.stopBits > other.stopBits:
                        return 1
                if self.parity is None or other.parity is None:
                    if self.parity != other.parity:
                        return (-1 if self.parity is None else 1)
                else:
                    if self.parity < other.parity:
                        return -1
                    elif self.parity > other.parity:
                        return 1
                if self.timeout is None or other.timeout is None:
                    if self.timeout != other.timeout:
                        return (-1 if self.timeout is None else 1)
                else:
                    if self.timeout < other.timeout:
                        return -1
                    elif self.timeout > other.timeout:
                        return 1
                if self.reserved is None or other.reserved is None:
                    if self.reserved != other.reserved:
                        return (-1 if self.reserved is None else 1)
                else:
                    if self.reserved < other.reserved:
                        return -1
                    elif self.reserved > other.reserved:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_StationArea._t_DxPropertyStation)

        __repr__ = __str__

    _M_StationArea._t_DxPropertyStation = IcePy.defineStruct('::StationArea::DxPropertyStation', DxPropertyStation, (), (
        ('name', (), _M_DemoArea._t_ByteSeq),
        ('nYX', (), IcePy._t_int),
        ('nYC', (), IcePy._t_int),
        ('type', (), IcePy._t_short),
        ('protocol', (), _M_DemoArea._t_ByteSeq),
        ('addr1', (), _M_DemoArea._t_ByteSeq),
        ('addr2', (), _M_DemoArea._t_ByteSeq),
        ('port', (), IcePy._t_short),
        ('slaveAddr', (), IcePy._t_int),
        ('devName', (), _M_DemoArea._t_ByteSeq),
        ('baud', (), IcePy._t_int),
        ('dataBits', (), IcePy._t_int),
        ('stopBits', (), IcePy._t_int),
        ('parity', (), IcePy._t_byte),
        ('timeout', (), IcePy._t_int),
        ('reserved', (), IcePy._t_int)
    ))

    _M_StationArea.DxPropertyStation = DxPropertyStation
    del DxPropertyStation

if '_t_DxPropertyStationSeq' not in _M_StationArea.__dict__:
    _M_StationArea._t_DxPropertyStationSeq = IcePy.defineSequence('::StationArea::DxPropertyStationSeq', (), _M_StationArea._t_DxPropertyStation)

# End of module StationArea

# Start of module SystemArea
_M_SystemArea = Ice.openModule('SystemArea')
__name__ = 'SystemArea'

if 'DxPropertySystem' not in _M_SystemArea.__dict__:
    _M_SystemArea.DxPropertySystem = Ice.createTempClass()
    class DxPropertySystem(object):
        def __init__(self, name=None, nstation=0):
            self.name = name
            self.nstation = nstation

        def __hash__(self):
            _h = 0
            if self.name:
                for _i0 in self.name:
                    _h = 5 * _h + Ice.getHash(_i0)
            _h = 5 * _h + Ice.getHash(self.nstation)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SystemArea.DxPropertySystem):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.nstation is None or other.nstation is None:
                    if self.nstation != other.nstation:
                        return (-1 if self.nstation is None else 1)
                else:
                    if self.nstation < other.nstation:
                        return -1
                    elif self.nstation > other.nstation:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SystemArea._t_DxPropertySystem)

        __repr__ = __str__

    _M_SystemArea._t_DxPropertySystem = IcePy.defineStruct('::SystemArea::DxPropertySystem', DxPropertySystem, (), (
        ('name', (), _M_DemoArea._t_ByteSeq),
        ('nstation', (), IcePy._t_short)
    ))

    _M_SystemArea.DxPropertySystem = DxPropertySystem
    del DxPropertySystem

# End of module SystemArea

# Start of module CommandArea
_M_CommandArea = Ice.openModule('CommandArea')
__name__ = 'CommandArea'

_M_CommandArea._t_DataCommand = IcePy.defineValue('::CommandArea::DataCommand', Ice.Value, -1, (), False, True, None, ())

if 'DataCommandPrx' not in _M_CommandArea.__dict__:
    _M_CommandArea.DataCommandPrx = Ice.createTempClass()
    class DataCommandPrx(Ice.ObjectPrx):

        def RPCDelYCProperty(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.invoke(self, ((station, pIDs), context))

        def RPCDelYCPropertyAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCDelYCProperty(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCDelYCProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.end(self, _r)

        def RPCGetYCProperty(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.invoke(self, ((station, ), context))

        def RPCGetYCPropertyAsync(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.invokeAsync(self, ((station, ), context))

        def begin_RPCGetYCProperty(self, station, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.begin(self, ((station, ), _response, _ex, _sent, context))

        def end_RPCGetYCProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.end(self, _r)

        def RPCSetYCProperty(self, station, pIDs, YCProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.invoke(self, ((station, pIDs, YCProperty), context))

        def RPCSetYCPropertyAsync(self, station, pIDs, YCProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.invokeAsync(self, ((station, pIDs, YCProperty), context))

        def begin_RPCSetYCProperty(self, station, pIDs, YCProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.begin(self, ((station, pIDs, YCProperty), _response, _ex, _sent, context))

        def end_RPCSetYCProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.end(self, _r)

        def RPCGetRealtimeYCData(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.invoke(self, ((station, pIDs), context))

        def RPCGetRealtimeYCDataAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCGetRealtimeYCData(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.end(self, _r)

        def RPCGetRealtimeYCDataForHTML(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.invoke(self, ((pIDs, ), context))

        def RPCGetRealtimeYCDataForHTMLAsync(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.invokeAsync(self, ((pIDs, ), context))

        def begin_RPCGetRealtimeYCDataForHTML(self, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.begin(self, ((pIDs, ), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYCDataForHTML(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.end(self, _r)

        def RPCGetDayYCDatas(self, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.invoke(self, ((datetime, pIDs), context))

        def RPCGetDayYCDatasAsync(self, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.invokeAsync(self, ((datetime, pIDs), context))

        def begin_RPCGetDayYCDatas(self, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.begin(self, ((datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetDayYCDatas(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.end(self, _r)

        def RPCGetPeriodYCDatas(self, datetime0, datetime1, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.invoke(self, ((datetime0, datetime1, pIDs), context))

        def RPCGetPeriodYCDatasAsync(self, datetime0, datetime1, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.invokeAsync(self, ((datetime0, datetime1, pIDs), context))

        def begin_RPCGetPeriodYCDatas(self, datetime0, datetime1, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.begin(self, ((datetime0, datetime1, pIDs), _response, _ex, _sent, context))

        def end_RPCGetPeriodYCDatas(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.end(self, _r)

        def RPCGetTimePointYCData(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.invoke(self, ((station, datetime, pIDs), context))

        def RPCGetTimePointYCDataAsync(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.invokeAsync(self, ((station, datetime, pIDs), context))

        def begin_RPCGetTimePointYCData(self, station, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.begin(self, ((station, datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetTimePointYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.end(self, _r)

        def RPCSetRealtimeYCData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.invoke(self, ((station, pIDs, data), context))

        def RPCSetRealtimeYCDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSetRealtimeYCData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSetRealtimeYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.end(self, _r)

        def RPCSaveYCData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.invoke(self, ((station, pIDs, data), context))

        def RPCSaveYCDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSaveYCData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSaveYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.end(self, _r)

        def RPCDelYXProperty(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.invoke(self, ((station, pIDs), context))

        def RPCDelYXPropertyAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCDelYXProperty(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCDelYXProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.end(self, _r)

        def RPCGetYXProperty(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.invoke(self, ((station, ), context))

        def RPCGetYXPropertyAsync(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.invokeAsync(self, ((station, ), context))

        def begin_RPCGetYXProperty(self, station, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.begin(self, ((station, ), _response, _ex, _sent, context))

        def end_RPCGetYXProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.end(self, _r)

        def RPCSetYXProperty(self, station, pIDs, YXProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.invoke(self, ((station, pIDs, YXProperty), context))

        def RPCSetYXPropertyAsync(self, station, pIDs, YXProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.invokeAsync(self, ((station, pIDs, YXProperty), context))

        def begin_RPCSetYXProperty(self, station, pIDs, YXProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.begin(self, ((station, pIDs, YXProperty), _response, _ex, _sent, context))

        def end_RPCSetYXProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.end(self, _r)

        def RPCGetRealtimeYXData(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.invoke(self, ((station, pIDs), context))

        def RPCGetRealtimeYXDataAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCGetRealtimeYXData(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.end(self, _r)

        def RPCGetRealtimeYXDataForHTML(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.invoke(self, ((pIDs, ), context))

        def RPCGetRealtimeYXDataForHTMLAsync(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.invokeAsync(self, ((pIDs, ), context))

        def begin_RPCGetRealtimeYXDataForHTML(self, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.begin(self, ((pIDs, ), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYXDataForHTML(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.end(self, _r)

        def RPCGetDayYXData(self, station, datetime, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.invoke(self, ((station, datetime, pID), context))

        def RPCGetDayYXDataAsync(self, station, datetime, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.invokeAsync(self, ((station, datetime, pID), context))

        def begin_RPCGetDayYXData(self, station, datetime, pID, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.begin(self, ((station, datetime, pID), _response, _ex, _sent, context))

        def end_RPCGetDayYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.end(self, _r)

        def RPCGetDayYXDatas(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.invoke(self, ((station, datetime, pIDs), context))

        def RPCGetDayYXDatasAsync(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.invokeAsync(self, ((station, datetime, pIDs), context))

        def begin_RPCGetDayYXDatas(self, station, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.begin(self, ((station, datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetDayYXDatas(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.end(self, _r)

        def RPCGetPeriodYXData(self, station, datetime0, datetime1, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.invoke(self, ((station, datetime0, datetime1, pID), context))

        def RPCGetPeriodYXDataAsync(self, station, datetime0, datetime1, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.invokeAsync(self, ((station, datetime0, datetime1, pID), context))

        def begin_RPCGetPeriodYXData(self, station, datetime0, datetime1, pID, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.begin(self, ((station, datetime0, datetime1, pID), _response, _ex, _sent, context))

        def end_RPCGetPeriodYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.end(self, _r)

        def RPCGetTimePointYXData(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.invoke(self, ((station, datetime, pIDs), context))

        def RPCGetTimePointYXDataAsync(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.invokeAsync(self, ((station, datetime, pIDs), context))

        def begin_RPCGetTimePointYXData(self, station, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.begin(self, ((station, datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetTimePointYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.end(self, _r)

        def RPCSetRealtimeYXData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.invoke(self, ((station, pIDs, data), context))

        def RPCSetRealtimeYXDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSetRealtimeYXData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSetRealtimeYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.end(self, _r)

        def RPCSaveYXData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.invoke(self, ((station, pIDs, data), context))

        def RPCSaveYXDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSaveYXData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSaveYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.end(self, _r)

        def RPCDelStationProperty(self, stations, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.invoke(self, ((stations, ), context))

        def RPCDelStationPropertyAsync(self, stations, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.invokeAsync(self, ((stations, ), context))

        def begin_RPCDelStationProperty(self, stations, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.begin(self, ((stations, ), _response, _ex, _sent, context))

        def end_RPCDelStationProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.end(self, _r)

        def RPCGetStationProperty(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.invoke(self, ((), context))

        def RPCGetStationPropertyAsync(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.invokeAsync(self, ((), context))

        def begin_RPCGetStationProperty(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.begin(self, ((), _response, _ex, _sent, context))

        def end_RPCGetStationProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.end(self, _r)

        def RPCSetStationProperty(self, stations, StationProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.invoke(self, ((stations, StationProperty), context))

        def RPCSetStationPropertyAsync(self, stations, StationProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.invokeAsync(self, ((stations, StationProperty), context))

        def begin_RPCSetStationProperty(self, stations, StationProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.begin(self, ((stations, StationProperty), _response, _ex, _sent, context))

        def end_RPCSetStationProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.end(self, _r)

        def RPCGetSystemProperty(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetSystemProperty.invoke(self, ((), context))

        def RPCGetSystemPropertyAsync(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetSystemProperty.invokeAsync(self, ((), context))

        def begin_RPCGetSystemProperty(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetSystemProperty.begin(self, ((), _response, _ex, _sent, context))

        def end_RPCGetSystemProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetSystemProperty.end(self, _r)

        def RPCSetSystemProperty(self, SystemProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetSystemProperty.invoke(self, ((SystemProperty, ), context))

        def RPCSetSystemPropertyAsync(self, SystemProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetSystemProperty.invokeAsync(self, ((SystemProperty, ), context))

        def begin_RPCSetSystemProperty(self, SystemProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetSystemProperty.begin(self, ((SystemProperty, ), _response, _ex, _sent, context))

        def end_RPCSetSystemProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetSystemProperty.end(self, _r)

        def RPCGetPropertyTable(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.invoke(self, ((), context))

        def RPCGetPropertyTableAsync(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.invokeAsync(self, ((), context))

        def begin_RPCGetPropertyTable(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.begin(self, ((), _response, _ex, _sent, context))

        def end_RPCGetPropertyTable(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_CommandArea.DataCommandPrx.ice_checkedCast(proxy, '::CommandArea::DataCommand', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_CommandArea.DataCommandPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::CommandArea::DataCommand'
    _M_CommandArea._t_DataCommandPrx = IcePy.defineProxy('::CommandArea::DataCommand', DataCommandPrx)

    _M_CommandArea.DataCommandPrx = DataCommandPrx
    del DataCommandPrx

    _M_CommandArea.DataCommand = Ice.createTempClass()
    class DataCommand(Ice.Object):

        def ice_ids(self, current=None):
            return ('::CommandArea::DataCommand', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CommandArea::DataCommand'

        @staticmethod
        def ice_staticId():
            return '::CommandArea::DataCommand'

        def RPCDelYCProperty(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCDelYCProperty' not implemented")

        def RPCGetYCProperty(self, station, current=None):
            raise NotImplementedError("servant method 'RPCGetYCProperty' not implemented")

        def RPCSetYCProperty(self, station, pIDs, YCProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetYCProperty' not implemented")

        def RPCGetRealtimeYCData(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYCData' not implemented")

        def RPCGetRealtimeYCDataForHTML(self, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYCDataForHTML' not implemented")

        def RPCGetDayYCDatas(self, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetDayYCDatas' not implemented")

        def RPCGetPeriodYCDatas(self, datetime0, datetime1, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetPeriodYCDatas' not implemented")

        def RPCGetTimePointYCData(self, station, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetTimePointYCData' not implemented")

        def RPCSetRealtimeYCData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSetRealtimeYCData' not implemented")

        def RPCSaveYCData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSaveYCData' not implemented")

        def RPCDelYXProperty(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCDelYXProperty' not implemented")

        def RPCGetYXProperty(self, station, current=None):
            raise NotImplementedError("servant method 'RPCGetYXProperty' not implemented")

        def RPCSetYXProperty(self, station, pIDs, YXProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetYXProperty' not implemented")

        def RPCGetRealtimeYXData(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYXData' not implemented")

        def RPCGetRealtimeYXDataForHTML(self, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYXDataForHTML' not implemented")

        def RPCGetDayYXData(self, station, datetime, pID, current=None):
            raise NotImplementedError("servant method 'RPCGetDayYXData' not implemented")

        def RPCGetDayYXDatas(self, station, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetDayYXDatas' not implemented")

        def RPCGetPeriodYXData(self, station, datetime0, datetime1, pID, current=None):
            raise NotImplementedError("servant method 'RPCGetPeriodYXData' not implemented")

        def RPCGetTimePointYXData(self, station, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetTimePointYXData' not implemented")

        def RPCSetRealtimeYXData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSetRealtimeYXData' not implemented")

        def RPCSaveYXData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSaveYXData' not implemented")

        def RPCDelStationProperty(self, stations, current=None):
            raise NotImplementedError("servant method 'RPCDelStationProperty' not implemented")

        def RPCGetStationProperty(self, current=None):
            raise NotImplementedError("servant method 'RPCGetStationProperty' not implemented")

        def RPCSetStationProperty(self, stations, StationProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetStationProperty' not implemented")

        def RPCGetSystemProperty(self, current=None):
            raise NotImplementedError("servant method 'RPCGetSystemProperty' not implemented")

        def RPCSetSystemProperty(self, SystemProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetSystemProperty' not implemented")

        def RPCGetPropertyTable(self, current=None):
            raise NotImplementedError("servant method 'RPCGetPropertyTable' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_CommandArea._t_DataCommandDisp)

        __repr__ = __str__

    _M_CommandArea._t_DataCommandDisp = IcePy.defineClass('::CommandArea::DataCommand', DataCommand, (), None, ())
    DataCommand._ice_type = _M_CommandArea._t_DataCommandDisp

    DataCommand._op_RPCDelYCProperty = IcePy.Operation('RPCDelYCProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetYCProperty = IcePy.Operation('RPCGetYCProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxPropertyYCSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetYCProperty = IcePy.Operation('RPCSetYCProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxPropertyYCSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYCData = IcePy.Operation('RPCGetRealtimeYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YCArea._t_DxDTYCSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYCDataForHTML = IcePy.Operation('RPCGetRealtimeYCDataForHTML', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DemoArea._t_StringSeq, False, 0),), (((), _M_YCArea._t_DxDTYCSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetDayYCDatas = IcePy.Operation('RPCGetDayYCDatas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0)), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetPeriodYCDatas = IcePy.Operation('RPCGetPeriodYCDatas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0)), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetTimePointYCData = IcePy.Operation('RPCGetTimePointYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YCArea._t_DxDTYCSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetRealtimeYCData = IcePy.Operation('RPCSetRealtimeYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSaveYCData = IcePy.Operation('RPCSaveYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCDelYXProperty = IcePy.Operation('RPCDelYXProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetYXProperty = IcePy.Operation('RPCGetYXProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxPropertyYXSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetYXProperty = IcePy.Operation('RPCSetYXProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxPropertyYXSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYXData = IcePy.Operation('RPCGetRealtimeYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYXDataForHTML = IcePy.Operation('RPCGetRealtimeYXDataForHTML', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DemoArea._t_StringSeq, False, 0),), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetDayYXData = IcePy.Operation('RPCGetDayYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetDayYXDatas = IcePy.Operation('RPCGetDayYXDatas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxDTYXSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetPeriodYXData = IcePy.Operation('RPCGetPeriodYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetTimePointYXData = IcePy.Operation('RPCGetTimePointYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetRealtimeYXData = IcePy.Operation('RPCSetRealtimeYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxDTYXSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSaveYXData = IcePy.Operation('RPCSaveYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxDTYXSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCDelStationProperty = IcePy.Operation('RPCDelStationProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DemoArea._t_LongSeq, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetStationProperty = IcePy.Operation('RPCGetStationProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_StationArea._t_DxPropertyStationSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetStationProperty = IcePy.Operation('RPCSetStationProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_StationArea._t_DxPropertyStationSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetSystemProperty = IcePy.Operation('RPCGetSystemProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), _M_SystemArea._t_DxPropertySystem, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetSystemProperty = IcePy.Operation('RPCSetSystemProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SystemArea._t_DxPropertySystem, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetPropertyTable = IcePy.Operation('RPCGetPropertyTable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0)), ((), IcePy._t_int, False, 0), ())

    _M_CommandArea.DataCommand = DataCommand
    del DataCommand

# End of module CommandArea
